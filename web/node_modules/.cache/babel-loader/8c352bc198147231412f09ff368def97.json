{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\OrthoDoc\\\\web\\\\src\\\\Pages\\\\Message.js\",\n    _s = $RefreshSig$();\n\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { query, where } from \"firebase/firestore\";\nimport { useLocation } from 'react-router-dom';\nimport { db } from '../firebase-config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Message(_ref) {\n  _s();\n\n  let {\n    own\n  } = _ref;\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n\n  const querySnapshot = async () => {\n    console.log(props.route.params.params);\n    const col = collection(db, \"chatroom\");\n    const q = query(col, where(\"chatId\", \"==\", props.route.params.params.userid + props.route.params.params.docid));\n    const snap = await getDocs(q);\n    let messageArraay = [];\n    snap.forEach(doc => {\n      const new_obj = { ...doc.data(),\n        createdAt: doc.data().createdAt.toDate()\n      };\n      messageArraay.push(new_obj);\n    });\n    console.log(messageArraay);\n    setMessages(messageArraay.reverse());\n  };\n\n  useEffect(() => {\n    console.log(props.route);\n    querySnapshot();\n  }, []);\n\n  const onSend = messageArray => {\n    const msg = messageArray[0];\n    const mymsg = { ...msg,\n      sentBy: props.route.params.params.current == \"doctor\" ? props.route.params.params.docid : props.route.params.params.userid,\n      sentTo: props.route.params.params.current == \"doctor\" ? props.route.params.params.userid : props.route.params.params.docid,\n      craetedAt: new Date(),\n      chatId: props.route.params.params.userid + props.route.params.params.docid\n    };\n    setMessages(previousMessages => GiftedChat.append(previousMessages, mymsg));\n    const docid = props.route.params.params.docid > props.route.params.params.userid ? props.route.params.params.userid + \"-\" + props.route.params.params.docid : props.route.params.params.docid + \"-\" + props.route.params.params.userid;\n    const myDoc = doc(db, \"chatroom\", new Date().toString());\n    setDoc(myDoc, mymsg).then(() => {\n      console.log(\"Document written with ID: \", myDoc.id);\n    }).catch(error => {\n      console.error(\"Error adding document: \", error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: own ? \"message own\" : \"message\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageTop\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"messageText\",\n          children: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageBottom\",\n        children: \"1 hour ago\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n}\n\n_s(Message, \"1ncqsxpnPKjJAbErnP9cDwCKrRs=\", false, function () {\n  return [useLocation];\n});\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/OrthoDoc/web/src/Pages/Message.js"],"names":["collection","getDocs","doc","setDoc","query","where","useLocation","db","Message","own","location","messages","setMessages","useState","querySnapshot","console","log","props","route","params","col","q","userid","docid","snap","messageArraay","forEach","new_obj","data","createdAt","toDate","push","reverse","useEffect","onSend","messageArray","msg","mymsg","sentBy","current","sentTo","craetedAt","Date","chatId","previousMessages","GiftedChat","append","myDoc","toString","then","id","catch","error","message"],"mappings":"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","sourcesContent":["import { collection, getDocs } from \"firebase/firestore\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { query, where } from \"firebase/firestore\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { db } from '../firebase-config';\r\nfunction Message({own}){\r\n    const location = useLocation();\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    const querySnapshot = async () => {\r\n      console.log(props.route.params.params);\r\n      const col = collection(db, \"chatroom\");\r\n      const q = query(\r\n        col,\r\n        where(\r\n          \"chatId\",\r\n          \"==\",\r\n          props.route.params.params.userid + props.route.params.params.docid\r\n        )\r\n      );\r\n      const snap = await getDocs(q);\r\n      let messageArraay = [];\r\n      snap.forEach((doc) => {\r\n        const new_obj = {\r\n          ...doc.data(),\r\n          createdAt: doc.data().createdAt.toDate(),\r\n        };\r\n  \r\n        messageArraay.push(new_obj);\r\n      });\r\n      console.log(messageArraay);\r\n      setMessages(messageArraay.reverse());\r\n    };\r\n  \r\n    useEffect(() => {\r\n      console.log(props.route);\r\n      querySnapshot();\r\n    }, []);\r\n    const onSend = (messageArray) => {\r\n        const msg = messageArray[0];\r\n        const mymsg = {\r\n          ...msg,\r\n          sentBy:\r\n            props.route.params.params.current == \"doctor\"\r\n              ? props.route.params.params.docid\r\n              : props.route.params.params.userid,\r\n          sentTo:\r\n            props.route.params.params.current == \"doctor\"\r\n              ? props.route.params.params.userid\r\n              : props.route.params.params.docid,\r\n    \r\n          craetedAt: new Date(),\r\n          chatId:\r\n            props.route.params.params.userid + props.route.params.params.docid,\r\n        };\r\n        setMessages((previousMessages) =>\r\n      GiftedChat.append(previousMessages, mymsg)\r\n    );\r\n\r\n    const docid =\r\n      props.route.params.params.docid > props.route.params.params.userid\r\n        ? props.route.params.params.userid +\r\n          \"-\" +\r\n          props.route.params.params.docid\r\n        : props.route.params.params.docid +\r\n          \"-\" +\r\n          props.route.params.params.userid;\r\n\r\n    const myDoc = doc(db, \"chatroom\", new Date().toString());\r\n    setDoc(myDoc, mymsg)\r\n      .then(() => {\r\n        console.log(\"Document written with ID: \", myDoc.id);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error adding document: \", error.message);\r\n      });\r\n  };\r\nreturn(\r\n<>\r\n<div className={own ? \"message own\" : \"message\"}>\r\n<div className=\"messageTop\">\r\n<p className='messageText'>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p></div>\r\n<div className=\"messageBottom\">1 hour ago</div>\r\n</div>\r\n</>\r\n\r\n);\r\n\r\n}\r\nexport default Message; "]},"metadata":{},"sourceType":"module"}