{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Ahmed\\\\Desktop\\\\OrthoDoc\\\\web\\\\src\\\\Pages\\\\Message.js\",\n    _s = $RefreshSig$();\n\nimport { collection, getDocs } from \"firebase/firestore\";\nimport { doc, setDoc } from \"firebase/firestore\";\nimport { query, where } from \"firebase/firestore\";\nimport { useLocation } from 'react-router-dom';\nimport { db } from '../firebase-config';\nimport { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction Message(_ref) {\n  _s();\n\n  let {\n    own\n  } = _ref;\n  const location = useLocation();\n  const [messages, setMessages] = useState([]);\n  const [temp, setTemp] = useState([]);\n\n  const querySnapshot = async () => {\n    console.log(\"State\", location.state.docid);\n    const col = collection(db, \"chatroom\");\n    const q = query(col, where(\"chatId\", \"==\", location.state.userid + location.state.docid));\n    const snap = await getDocs(q);\n    let messageArraay = [];\n    snap.forEach(doc => {\n      const new_obj = { ...doc.data(),\n        createdAt: doc.data().createdAt.toDate()\n      };\n      messageArraay.push(new_obj);\n    });\n    console.log(\"message array\", messageArraay);\n    setMessages(messageArraay.reverse());\n  };\n\n  useEffect(() => {\n    //console.log(props.route);\n    querySnapshot();\n  }, []);\n\n  const onSend = messageArray => {\n    const msg = messageArray[0];\n    const mymsg = { ...msg,\n      sentBy: location.state.current == \"doctor\" ? location.state.docid : location.state.userid,\n      sentTo: location.state.current == \"doctor\" ? location.state.userid : location.state.docid,\n      craetedAt: new Date(),\n      chatId: location.state.userid + location.state.docid\n    }; //setMessages((previousMessages) =>\n    // setTemp((prev) => [...prev, mymsg]);\n    //temp.append(previousMessages,mymsg);\n    //GiftedChat.append(previousMessages, mymsg)\n    //console.log(\"set messages\"+temp);\n    //);\n\n    setMessages(previousMessages => setTemp(previousMessages => [...previousMessages, mymsg]));\n    console.log(\"temppp\" + temp);\n    const docid = location.state.docid > location.state.userid ? location.state.userid + \"-\" + location.state.docid : location.state.docid + \"-\" + location.state.userid;\n    const myDoc = doc(db, \"chatroom\", new Date().toString());\n    setDoc(myDoc, mymsg).then(() => {\n      console.log(\"Document written with ID: \", myDoc.id);\n    }).catch(error => {\n      console.error(\"Error adding document: \", error.message);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: own ? \"message own\" : \"message\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageTop\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"messageText\",\n          children: \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"messageBottom\",\n        children: \"1 hour ago\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 1\n    }, this)\n  }, void 0, false);\n}\n\n_s(Message, \"lW2BfiMKl2bJ2/BEJzRfj1KZFHs=\", false, function () {\n  return [useLocation];\n});\n\n_c = Message;\nexport default Message;\n\nvar _c;\n\n$RefreshReg$(_c, \"Message\");","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/OrthoDoc/web/src/Pages/Message.js"],"names":["collection","getDocs","doc","setDoc","query","where","useLocation","db","useState","useEffect","Message","own","location","messages","setMessages","temp","setTemp","querySnapshot","console","log","state","docid","col","q","userid","snap","messageArraay","forEach","new_obj","data","createdAt","toDate","push","reverse","onSend","messageArray","msg","mymsg","sentBy","current","sentTo","craetedAt","Date","chatId","previousMessages","myDoc","toString","then","id","catch","error","message"],"mappings":"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","sourcesContent":["import { collection, getDocs } from \"firebase/firestore\";\r\nimport { doc, setDoc } from \"firebase/firestore\";\r\nimport { query, where } from \"firebase/firestore\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { db } from '../firebase-config';\r\nimport { useState, useEffect } from \"react\";\r\nfunction Message({own}){\r\n    const location = useLocation();\r\n    const [messages, setMessages] = useState([]);\r\n    const [temp, setTemp] = useState([]);\r\n\r\n    const querySnapshot = async () => {\r\n      console.log(\"State\",location.state.docid);\r\n      const col = collection(db, \"chatroom\");\r\n      const q = query(\r\n        col,\r\n        where(\r\n          \"chatId\",\r\n          \"==\",\r\n          location.state.userid + location.state.docid\r\n        )\r\n      );\r\n      const snap = await getDocs(q);\r\n      let messageArraay = [];\r\n      snap.forEach((doc) => {\r\n        const new_obj = {\r\n          ...doc.data(),\r\n          createdAt: doc.data().createdAt.toDate(),\r\n        };\r\n  \r\n        messageArraay.push(new_obj);\r\n      });\r\n      console.log(\"message array\",messageArraay);\r\n      setMessages(messageArraay.reverse());\r\n    };\r\n  \r\n    useEffect(() => {\r\n      //console.log(props.route);\r\n      querySnapshot();\r\n    }, []);\r\n    const onSend = (messageArray) => {\r\n        const msg = messageArray[0];\r\n        const mymsg = {\r\n          ...msg,\r\n          sentBy:\r\n            location.state.current == \"doctor\"\r\n              ? location.state.docid\r\n              : location.state.userid,\r\n          sentTo:\r\n          location.state.current == \"doctor\"\r\n              ? location.state.userid\r\n              : location.state.docid,\r\n    \r\n          craetedAt: new Date(),\r\n          chatId:\r\n          location.state.userid +location.state.docid,\r\n        };\r\n        //setMessages((previousMessages) =>\r\n       // setTemp((prev) => [...prev, mymsg]);\r\n        //temp.append(previousMessages,mymsg);\r\n      //GiftedChat.append(previousMessages, mymsg)\r\n      //console.log(\"set messages\"+temp);\r\n    //);\r\n    setMessages((previousMessages) =>\r\n    setTemp((previousMessages) => [...previousMessages, mymsg])\r\n    );\r\n    console.log(\"temppp\"+temp);\r\n    const docid =\r\n    location.state.docid > location.state.userid\r\n        ? location.state.userid +\r\n          \"-\" +\r\n          location.state.docid\r\n        : location.state.docid +\r\n          \"-\" +\r\n          location.state.userid;\r\n\r\n    const myDoc = doc(db, \"chatroom\", new Date().toString());\r\n    setDoc(myDoc, mymsg)\r\n      .then(() => {\r\n        console.log(\"Document written with ID: \", myDoc.id);\r\n      })\r\n      .catch((error) => {\r\n        console.error(\"Error adding document: \", error.message);\r\n      });\r\n  };\r\nreturn(\r\n<>\r\n<div className={own ? \"message own\" : \"message\"}>\r\n<div className=\"messageTop\">\r\n<p className='messageText'>Lorem Ipsum is simply dummy text of the printing and typesetting industry. </p></div>\r\n<div className=\"messageBottom\">1 hour ago</div>\r\n</div>\r\n</>\r\n\r\n);\r\n\r\n}\r\nexport default Message; "]},"metadata":{},"sourceType":"module"}