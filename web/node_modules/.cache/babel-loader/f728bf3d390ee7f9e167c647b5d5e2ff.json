{"ast":null,"code":"// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\n\nvar request = require(\"request\");\n\nvar _ = require('underscore');\n\nexports.geocode = function (providerOpts, loc, cbk, opts) {\n  var options = _.extend({\n    q: loc,\n    maxRows: 10,\n    username: providerOpts.username || \"demo\"\n  }, opts || {});\n\n  request({\n    uri: \"http://api.geonames.org/searchJSON\",\n    qs: options\n  }, function (err, resp, body) {\n    if (err) return cbk(err);\n    var result;\n\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n\n    cbk(null, result);\n  });\n};\n\nexports.reverseGeocode = function (providerOpts, lat, lng, cbk, opts) {\n  var options = _.extend({\n    lat: lat,\n    lng: lng,\n    username: providerOpts.username || \"demo\"\n  }, opts || {});\n\n  request({\n    uri: \"http://api.geonames.org/extendedFindNearby\",\n    qs: options\n  }, function (err, resp, body) {\n    if (err) return cbk(err);\n    var parser = new xml2js.Parser();\n    parser.parseString(body, function (err, result) {\n      if (err) return cbk(err); // Transform geonames' structure into something that looks like Google's JSON outpu\n      // https://developers.google.com/maps/documentation/geocoding/#JSON\n\n      var googlejson = {\n        \"status\": \"OK\",\n        \"results\": [{\n          \"address_components\": [],\n          \"formatted_address\": \"\",\n          \"geometry\": {\n            \"location\": {\n              \"lat\": lat,\n              \"lng\": lng\n            }\n          }\n        }]\n      };\n\n      if (result.geonames.address) {\n        var a = result.geonames.address[0];\n        if (a.streetNumber && typeof a.streetNumber[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.streetNumber[0],\n          \"short_name\": a.streetNumber[0],\n          \"types\": [\"street_number\"]\n        });\n        if (a.street && typeof a.street[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.street[0],\n          \"short_name\": a.street[0],\n          \"types\": [\"route\"]\n        });\n        if (a.placename && typeof a.placename[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.placename[0],\n          \"short_name\": a.placename[0],\n          \"types\": [\"locality\", \"political\"]\n        });\n        if (a.adminName1 && typeof a.adminName1[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.adminName1[0],\n          \"short_name\": a.adminCode1[0],\n          \"types\": [\"administrative_area_level_1\", \"political\"]\n        });\n        if (a.adminName2 && typeof a.adminName2[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.adminName2[0],\n          \"short_name\": a.adminCode2[0],\n          \"types\": [\"administrative_area_level_2\", \"political\"]\n        });\n        if (a.countryCode && typeof a.countryCode[0] == \"string\") googlejson.results[0].address_components.push({\n          \"long_name\": a.countryCode[0] == \"US\" ? \"United States\" : \"\",\n          \"short_name\": a.countryCode[0],\n          \"types\": [\"country\"]\n        });\n        if (a.lat && typeof a.lat[0] == \"string\") googlejson.results[0].geometry.location = {\n          \"lat\": parseFloat(a.lat[0]),\n          \"lng\": parseFloat(a.lng[0])\n        };\n      }\n\n      if (result.geonames.geoname) {\n        // http://www.geonames.org/export/codes.html\n        // https://developers.google.com/maps/documentation/geocoding/#Types\n        var fcode2google = {\n          \"ADM1\": [\"administrative_area_level_1\", \"political\"],\n          \"ADM2\": [\"administrative_area_level_2\", \"political\"],\n          \"ADM3\": [\"administrative_area_level_3\", \"political\"],\n          \"ADMD\": [\"political\"],\n          \"PPL\": [\"locality\"]\n        };\n        result.geonames.geoname.forEach(function (geoname) {\n          // Push only recognized types to results\n          if (geoname.fcode[0] == \"PCLI\") {\n            googlejson.results[0].address_components.push({\n              \"long_name\": geoname.name[0],\n              \"short_name\": geoname.countryCode[0],\n              \"types\": [\"country\", \"political\"]\n            });\n          } else if (fcode2google[geoname.fcode[0]]) {\n            googlejson.results[0].address_components.push({\n              \"long_name\": geoname.toponymName[0],\n              \"short_name\": geoname.name[0],\n              \"types\": fcode2google[geoname.fcode[0]]\n            });\n          }\n        });\n      } // Make a formatted address as well as we can\n\n\n      var shortNames = {};\n      googlejson.results[0].address_components.forEach(function (c) {\n        if (c.types[0] == \"country\") return shortNames.country = c.long_name || c.short_name;\n        shortNames[c.types[0]] = c.short_name;\n      });\n      var formatted = [];\n\n      if (shortNames.street_number || shortNames.route) {\n        formatted.push((shortNames.street_number ? shortNames.street_number + \" \" : \"\") + shortNames.route);\n      }\n\n      if (shortNames.locality) {\n        formatted.push(shortNames.locality);\n      }\n\n      if (shortNames.administrative_area_level_1) {\n        formatted.push(shortNames.administrative_area_level_1);\n      }\n\n      if (shortNames.country) {\n        formatted.push(shortNames.country);\n      }\n\n      googlejson.results[0].formatted_address = formatted.join(\", \");\n      cbk(null, googlejson);\n    });\n  });\n};","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/OrthoDoc/web/node_modules/geocoder/providers/geonames.js"],"names":["xml2js","require","request","_","exports","geocode","providerOpts","loc","cbk","opts","options","extend","q","maxRows","username","uri","qs","err","resp","body","result","JSON","parse","reverseGeocode","lat","lng","parser","Parser","parseString","googlejson","geonames","address","a","streetNumber","results","address_components","push","street","placename","adminName1","adminCode1","adminName2","adminCode2","countryCode","geometry","location","parseFloat","geoname","fcode2google","forEach","fcode","name","toponymName","shortNames","c","types","country","long_name","short_name","formatted","street_number","route","locality","administrative_area_level_1","formatted_address","join"],"mappings":"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","sourcesContent":["\n// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\nvar request = require(\"request\");\nvar _ = require('underscore');\n\nexports.geocode = function ( providerOpts, loc, cbk, opts ) {\n\n  var options = _.extend({q: loc, maxRows: 10, username:providerOpts.username||\"demo\" }, opts || {});\n\n  request({\n    uri:\"http://api.geonames.org/searchJSON\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n};\n\nexports.reverseGeocode = function ( providerOpts, lat, lng, cbk, opts ) {\n\n  var options = _.extend({lat:lat, lng:lng, username:providerOpts.username||\"demo\" }, opts || {});\n\n  request({\n    uri:\"http://api.geonames.org/extendedFindNearby\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n\n    var parser = new xml2js.Parser();\n    parser.parseString(body, function (err, result) {\n      if (err) return cbk(err); \n\n      // Transform geonames' structure into something that looks like Google's JSON outpu\n      // https://developers.google.com/maps/documentation/geocoding/#JSON\n      var googlejson = {\n        \"status\":\"OK\",\n        \"results\":[\n          {\n            \"address_components\":[],\n            \"formatted_address\":\"\",\n            \"geometry\":{\n              \"location\":{\n                \"lat\":lat,\n                \"lng\":lng\n              }\n            }\n          }\n        ]\n      };\n\n      if (result.geonames.address) {\n        var a = result.geonames.address[0];\n\n        if (a.streetNumber && typeof a.streetNumber[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.streetNumber[0],\n            \"short_name\":a.streetNumber[0],\n            \"types\":[\"street_number\"]\n          });\n\n        if (a.street && typeof a.street[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.street[0],\n            \"short_name\":a.street[0],\n            \"types\":[\"route\"]\n          });\n\n        if (a.placename && typeof a.placename[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.placename[0],\n            \"short_name\":a.placename[0],\n            \"types\":[\"locality\", \"political\"]\n          });\n\n        if (a.adminName1 && typeof a.adminName1[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.adminName1[0],\n            \"short_name\":a.adminCode1[0],\n            \"types\":[ \"administrative_area_level_1\", \"political\" ]\n          });\n\n        if (a.adminName2 && typeof a.adminName2[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.adminName2[0],\n            \"short_name\":a.adminCode2[0],\n            \"types\":[ \"administrative_area_level_2\", \"political\" ]\n          });\n\n        if (a.countryCode && typeof a.countryCode[0]==\"string\")\n          googlejson.results[0].address_components.push({\n            \"long_name\":a.countryCode[0]==\"US\"?\"United States\":\"\",\n            \"short_name\":a.countryCode[0],\n            \"types\":[ \"country\" ]\n          });\n\n        if (a.lat && typeof a.lat[0]==\"string\")\n          googlejson.results[0].geometry.location = {\n            \"lat\":parseFloat(a.lat[0]),\n            \"lng\":parseFloat(a.lng[0])\n          }\n      }\n\n      if (result.geonames.geoname) {\n        // http://www.geonames.org/export/codes.html\n        // https://developers.google.com/maps/documentation/geocoding/#Types\n        var fcode2google = {\n          \"ADM1\":[ \"administrative_area_level_1\", \"political\" ],\n          \"ADM2\":[ \"administrative_area_level_2\", \"political\" ],\n          \"ADM3\":[ \"administrative_area_level_3\", \"political\" ],\n          \"ADMD\":[ \"political\"],\n          \"PPL\" :[ \"locality\"]\n        };\n\n        result.geonames.geoname.forEach(function(geoname) {\n\n          // Push only recognized types to results\n          if (geoname.fcode[0]==\"PCLI\") {\n            googlejson.results[0].address_components.push({\n              \"long_name\":geoname.name[0],\n              \"short_name\":geoname.countryCode[0],\n              \"types\":[ \"country\", \"political\"]\n            });\n          \n          } else if (fcode2google[geoname.fcode[0]]) {\n\n\n            googlejson.results[0].address_components.push({\n              \"long_name\":geoname.toponymName[0],\n              \"short_name\":geoname.name[0],\n              \"types\":fcode2google[geoname.fcode[0]]\n            });\n          }\n\n        });\n      }\n\n      // Make a formatted address as well as we can\n      var shortNames = {};\n      googlejson.results[0].address_components.forEach(function(c) {\n        if (c.types[0]==\"country\") return shortNames.country = c.long_name || c.short_name;\n        shortNames[c.types[0]] = c.short_name;\n      });\n\n      var formatted = [];\n      if (shortNames.street_number || shortNames.route) {\n        formatted.push((shortNames.street_number?shortNames.street_number+\" \":\"\")+shortNames.route);\n      }\n      if (shortNames.locality) {\n        formatted.push(shortNames.locality);\n      }\n      if (shortNames.administrative_area_level_1) {\n        formatted.push(shortNames.administrative_area_level_1);\n      }\n      if (shortNames.country) {\n        formatted.push(shortNames.country);\n      }\n\n      googlejson.results[0].formatted_address = formatted.join(\", \");\n\n      cbk(null, googlejson);\n    });\n  });\n\n};\n"]},"metadata":{},"sourceType":"script"}