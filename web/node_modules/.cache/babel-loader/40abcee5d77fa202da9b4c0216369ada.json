{"ast":null,"code":"// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\n\nvar request = require(\"request\");\n\nvar _ = require('underscore');\n\nexports.geocode = function (providerOpts, loc, cbk, opts) {\n  var options = _.extend({\n    q: loc,\n    flags: \"J\",\n    appid: providerOpts.appid || \"[yourappidhere]\"\n  }, opts || {});\n\n  request({\n    uri: \"http://where.yahooapis.com/geocode\",\n    qs: options\n  }, function (err, resp, body) {\n    if (err) return cbk(err);\n    var result;\n\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n\n    cbk(null, result);\n  });\n}; // yahoo placefinder api http://developer.yahoo.com/geo/placefinder/guide/\n\n\nexports.reverseGeocode = function (providerOpts, lat, lng, cbk, opts) {\n  var options = _.extend({\n    q: lat + \", \" + lng,\n    gflags: \"R\",\n    flags: \"J\",\n    appid: providerOpts.appid || \"[yourappidhere]\"\n  }, opts || {});\n\n  request({\n    uri: \"http://where.yahooapis.com/geocode\",\n    qs: options\n  }, function (err, resp, body) {\n    // console.log(\"[GEOCODER Yahoo API] uri:\", \"http://where.yahooapis.com/geocode\");\n    // console.log(\"[GEOCODER Yahoo API] options:\", JSON.stringify(options));\n    // console.log(\"[GEOCODER Yahoo API] body:\", body);\n    if (err) return cbk(err);\n    var result;\n\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    } // Transform yahoo' structure into something that looks like Google's JSON outpu\n    // https://developers.google.com/maps/documentation/geocoding/#JSON\n\n\n    var googlejson = {\n      \"status\": \"OK\",\n      \"results\": [{\n        \"address_components\": [],\n        \"formatted_address\": \"\",\n        \"geometry\": {\n          \"location\": {\n            \"lat\": lat,\n            \"lng\": lng\n          }\n        }\n      }]\n    };\n\n    if (result.ResultSet.Error !== \"0\" && result.ResultSet.Error !== 0) {\n      console.log(\"[GEOCODER Yahoo API] ERROR\", result.Error, result.ErrorMessage);\n      return cbk(result.ResultSet.ErrorMessage);\n    }\n\n    var a = null; // Yahoo seems to change its response format \"randomly\". So, sometimes, it there is only one result,\n    // it will be in ResultSet.Result, and sometimes, in ResultSet.Results[0]\n\n    if (undefined !== result.ResultSet.Result) {\n      a = result.ResultSet.Result;\n    } else if (result.ResultSet.Results && result.ResultSet.Results.length) {\n      a = result.ResultSet.Results[0];\n    }\n\n    if (!a) {\n      return cbk(\"Error getting results from Yahoo API\");\n    }\n\n    if (a.house) googlejson.results[0].address_components.push({\n      \"long_name\": a.house,\n      \"short_name\": a.house,\n      \"types\": [\"street_number\"]\n    });\n    if (a.street) googlejson.results[0].address_components.push({\n      \"long_name\": a.street,\n      \"short_name\": a.street,\n      \"types\": [\"route\"]\n    });\n    if (a.city) googlejson.results[0].address_components.push({\n      \"long_name\": a.city,\n      \"short_name\": a.city,\n      \"types\": [\"locality\", \"political\"]\n    });\n    if (a.state) googlejson.results[0].address_components.push({\n      \"long_name\": a.state,\n      \"short_name\": a.statecode || a.state,\n      \"types\": [\"administrative_area_level_1\", \"political\"]\n    });\n    if (a.county) googlejson.results[0].address_components.push({\n      \"long_name\": a.county,\n      \"short_name\": a.countycode || a.county,\n      \"types\": [\"administrative_area_level_2\", \"political\"]\n    });\n    if (a.country) googlejson.results[0].address_components.push({\n      \"long_name\": a.country,\n      \"short_name\": a.countrycode,\n      \"types\": [\"country\"]\n    });\n    if (a.postal) googlejson.results[0].address_components.push({\n      \"long_name\": a.postal,\n      \"short_name\": a.postal,\n      \"types\": [\"postal_code\"]\n    });\n    if (a.latitude) googlejson.results[0].geometry.location = {\n      \"lat\": parseFloat(a.latitude),\n      \"lng\": parseFloat(a.longitude)\n    }; // Make a formatted address as well as we can\n\n    var formatted = [];\n    if (a.line1) formatted.push(a.line1);\n    if (a.line2) formatted.push(a.line2);\n    if (a.line3) formatted.push(a.line3);\n    if (a.line4) formatted.push(a.line4);\n    googlejson.results[0].formatted_address = formatted.join(\", \"); // console.log(\"[GEOCODER Yahoo API], calling callback w/\", JSON.stringify(googlejson));\n\n    cbk(null, googlejson);\n  });\n};","map":{"version":3,"sources":["C:/Users/Ahmed/Desktop/OrthoDoc/web/node_modules/geocoder/providers/yahoo.js"],"names":["xml2js","require","request","_","exports","geocode","providerOpts","loc","cbk","opts","options","extend","q","flags","appid","uri","qs","err","resp","body","result","JSON","parse","reverseGeocode","lat","lng","gflags","googlejson","ResultSet","Error","console","log","ErrorMessage","a","undefined","Result","Results","length","house","results","address_components","push","street","city","state","statecode","county","countycode","country","countrycode","postal","latitude","geometry","location","parseFloat","longitude","formatted","line1","line2","line3","line4","formatted_address","join"],"mappings":"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","sourcesContent":["// xml2js is optional because only needed for geonames support\nvar xml2js = require(\"xml2js\");\nvar request = require(\"request\");\nvar _ = require('underscore');\n\nexports.geocode = function ( providerOpts, loc, cbk, opts ) {\n\n  var options = _.extend({q: loc, flags: \"J\", appid:providerOpts.appid||\"[yourappidhere]\" }, opts || {});\n\n  request({\n    uri:\"http://where.yahooapis.com/geocode\",\n    qs:options\n  }, function(err,resp,body) {\n    if (err) return cbk(err);\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n    cbk(null,result);\n  });\n};\n\n// yahoo placefinder api http://developer.yahoo.com/geo/placefinder/guide/\nexports.reverseGeocode = function ( providerOpts, lat, lng, cbk, opts ) {\n\n  var options = _.extend({q: lat+\", \"+lng, gflags:\"R\", flags: \"J\", appid:providerOpts.appid||\"[yourappidhere]\" }, opts || {});\n\n  request({\n    uri:\"http://where.yahooapis.com/geocode\",\n    qs:options\n  }, function(err,resp,body) {\n\n    // console.log(\"[GEOCODER Yahoo API] uri:\", \"http://where.yahooapis.com/geocode\");\n    // console.log(\"[GEOCODER Yahoo API] options:\", JSON.stringify(options));\n    // console.log(\"[GEOCODER Yahoo API] body:\", body);\n\n    if (err) return cbk(err);\n\n    var result;\n    try {\n      result = JSON.parse(body);\n    } catch (err) {\n      cbk(err);\n      return;\n    }\n\n    // Transform yahoo' structure into something that looks like Google's JSON outpu\n    // https://developers.google.com/maps/documentation/geocoding/#JSON\n    var googlejson = {\n      \"status\":\"OK\",\n      \"results\":[\n        {\n          \"address_components\":[],\n          \"formatted_address\":\"\",\n          \"geometry\":{\n            \"location\":{\n              \"lat\":lat,\n              \"lng\":lng\n            }\n          }\n        }\n      ]\n    };\n\n    if (result.ResultSet.Error !== \"0\" && result.ResultSet.Error !== 0) {\n      console.log(\"[GEOCODER Yahoo API] ERROR\", result.Error, result.ErrorMessage);\n      return cbk(result.ResultSet.ErrorMessage);\n    }\n\n    var a = null;\n    // Yahoo seems to change its response format \"randomly\". So, sometimes, it there is only one result,\n    // it will be in ResultSet.Result, and sometimes, in ResultSet.Results[0]\n    if (undefined !== result.ResultSet.Result) {\n      a = result.ResultSet.Result;\n    }\n    else if (result.ResultSet.Results && result.ResultSet.Results.length) {\n      a = result.ResultSet.Results[0];\n    }\n\n    if (!a) {\n      return cbk(\"Error getting results from Yahoo API\");\n    }\n\n    if (a.house)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.house,\n        \"short_name\":a.house,\n        \"types\":[\"street_number\"]\n      });\n\n    if (a.street)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.street,\n        \"short_name\":a.street,\n        \"types\":[\"route\"]\n      });\n\n    if (a.city)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.city,\n        \"short_name\":a.city,\n        \"types\":[\"locality\", \"political\"]\n      });\n\n    if (a.state)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.state,\n        \"short_name\":a.statecode || a.state,\n        \"types\":[ \"administrative_area_level_1\", \"political\" ]\n      });\n\n    if (a.county)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.county,\n        \"short_name\":a.countycode || a.county,\n        \"types\":[ \"administrative_area_level_2\", \"political\" ]\n      });\n\n    if (a.country)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.country,\n        \"short_name\":a.countrycode,\n        \"types\":[ \"country\" ]\n      });\n\n    if (a.postal)\n      googlejson.results[0].address_components.push({\n        \"long_name\":a.postal,\n        \"short_name\":a.postal,\n        \"types\":[ \"postal_code\" ]\n      });\n\n    if (a.latitude)\n      googlejson.results[0].geometry.location = {\n        \"lat\":parseFloat(a.latitude),\n        \"lng\":parseFloat(a.longitude)\n      };\n\n    // Make a formatted address as well as we can\n    var formatted = [];\n    if (a.line1) formatted.push(a.line1);\n    if (a.line2) formatted.push(a.line2);\n    if (a.line3) formatted.push(a.line3);\n    if (a.line4) formatted.push(a.line4);\n\n    googlejson.results[0].formatted_address = formatted.join(\", \");\n\n    // console.log(\"[GEOCODER Yahoo API], calling callback w/\", JSON.stringify(googlejson));\n\n    cbk(null, googlejson);\n  });\n\n};\n"]},"metadata":{},"sourceType":"script"}