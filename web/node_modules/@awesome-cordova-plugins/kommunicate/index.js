var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { AwesomeCordovaNativePlugin, cordova } from '@awesome-cordova-plugins/core';
var KommunicateOriginal = /** @class */ (function (_super) {
    __extends(KommunicateOriginal, _super);
    function KommunicateOriginal() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    KommunicateOriginal.prototype.login = function (kmUser) { return cordova(this, "login", {}, arguments); };
    KommunicateOriginal.prototype.registerPushNotification = function () { return cordova(this, "registerPushNotification", {}, arguments); };
    KommunicateOriginal.prototype.isLoggedIn = function () { return cordova(this, "isLoggedIn", {}, arguments); };
    KommunicateOriginal.prototype.updatePushNotificationToken = function (token) { return cordova(this, "updatePushNotificationToken", {}, arguments); };
    KommunicateOriginal.prototype.launchConversation = function () { return cordova(this, "launchConversation", {}, arguments); };
    KommunicateOriginal.prototype.launchParticularConversation = function (conversationObject) { return cordova(this, "launchParticularConversation", {}, arguments); };
    KommunicateOriginal.prototype.startNewConversation = function (conversationParams) { return cordova(this, "startNewConversation", {}, arguments); };
    KommunicateOriginal.prototype.processPushNotification = function (data) { return cordova(this, "processPushNotification", { "sync": true }, arguments); };
    KommunicateOriginal.prototype.logout = function () { return cordova(this, "logout", {}, arguments); };
    KommunicateOriginal.prototype.startSingleChat = function (data) { return cordova(this, "startSingleChat", {}, arguments); };
    KommunicateOriginal.prototype.conversationBuilder = function (converationObject) { return cordova(this, "conversationBuilder", {}, arguments); };
    KommunicateOriginal.pluginName = "Kommunicate";
    KommunicateOriginal.plugin = "kommunicate-cordova-plugin";
    KommunicateOriginal.pluginRef = "kommunicate";
    KommunicateOriginal.repo = "https://github.com/Kommunicate-io/Kommunicate-Cordova-Ionic-PhoneGap-Chat-Plugin";
    KommunicateOriginal.platforms = ["Android", "Browser", "iOS"];
    return KommunicateOriginal;
}(AwesomeCordovaNativePlugin));
var Kommunicate = new KommunicateOriginal();
export { Kommunicate };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL3BsdWdpbnMva29tbXVuaWNhdGUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsT0FBTyx1Q0FBK0MsTUFBTSwrQkFBK0IsQ0FBQzs7SUE0QzNELCtCQUEwQjs7OztJQWtCekQsMkJBQUssYUFBQyxNQUFXO0lBVWpCLDhDQUF3QjtJQVV4QixnQ0FBVTtJQVdWLGlEQUEyQixhQUFDLEtBQWE7SUFVekMsd0NBQWtCO0lBZ0JsQixrREFBNEIsYUFBQyxrQkFBdUI7SUFhcEQsMENBQW9CLGFBQUMsa0JBQXVCO0lBVzVDLDZDQUF1QixhQUFDLElBQVM7SUFVakMsNEJBQU07SUFZTixxQ0FBZSxhQUFDLElBQVM7SUFrQnpCLHlDQUFtQixhQUFDLGlCQUFzQjs7Ozs7O3NCQXhMNUM7RUE2Q2lDLDBCQUEwQjtTQUE5QyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUGx1Z2luLCBDb3Jkb3ZhLCBBd2Vzb21lQ29yZG92YU5hdGl2ZVBsdWdpbiB9IGZyb20gJ0Bhd2Vzb21lLWNvcmRvdmEtcGx1Z2lucy9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBAbmFtZSBLb21tdW5pY2F0ZVxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgcGx1Z2luIGZvciB0aGUgS29tbXVuaWNhdGUgU0RLLlxuICogV2l0aCB0aGUgaGVscCBvZiB0aGlzIHBsdWdpbiwgeW91IGNhbiBlYXNpbHkgYWRkIGh1bWFuICsgYm90IGNoYXQgc3VwcG9ydCBmdW5jdGlvbmFsaXR5IHRvIHlvdSBhcHAuXG4gKiBSZWZlciB0bzogVE9ETzogaW5zZXJ0IHNpdGUgbGlua1xuICogRm9yIGRvY3VtZW50YXRpb246IFRPRE86IGluc2VydCBsaW5rXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEtvbW11bmljYXRlIH0gZnJvbSAnQGF3ZXNvbWUtY29yZG92YS1wbHVnaW5zL0tvbW11bmljYXRlJztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIGtvbW11bmljYXRlOiBLb21tdW5pY2F0ZSkgeyB9XG4gKiAvL2Fsc28gYWRkIFsuLi4sIEtvbW11bmljYXRlLCAuLi4gXSBpbnNpZGUgdGhlIHByb3ZpZGVycyBhcnJheSwgaWYgcmVxdWlyZWRcbiAqXG4gKiB2YXIga21Vc2VyID0ge1xuICogICAgdXNlcklkIDogJ3JhbmRvbXN0cmluZycsXG4gKiAgICBhdXRoZW50aWNhdGlvblR5cGVJZCA6IDFcbiAqIH07XG4gKlxuICogdGhpcy5rb21tdW5pY2F0ZS5sb2dpbihrbVVzZXIpXG4gKiAgIC50aGVuKChyZXM6IGFueSkgPT4gY29uc29sZS5sb2coXCJTdWNlc3NmdWxseSBsb2dnZWQgaW4uXCIgKyByZXMpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBsb2dnaW5nIGluLlwiICsgZXJyb3IpKTtcbiAqXG4gKiB2YXIgY29udmVyc2F0aW9uT2JqZWN0ID0ge1xuICogICAgaXNVbmlxdWUgOiBmYWxzZVxuICogfTtcbiAqXG4gKiB0aGlzLmtvbW11bmljYXRlLmNvbnZlcnNhdGlvbkJ1aWxkZXIoY29udmVyYXRpb25PYmplY3QpXG4gKiAgIC50aGVuKChjbGllbnRDaGFubmVsS2V5OiBhbnkpID0+IGNvbnNvbGUubG9nKFwiS29tbXVuaWNhdGUgY3JlYXRlIGNvbnZlcnNhdGlvbiBzdWNjZXNzZnVsIHRoZSBjbGllbnRDaGFubmVsS2V5IGlzIDogXCIgKyBjbGllbnRDaGFubmVsS2V5KSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgY29udmVyc2F0aW9uLlwiICsgZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdLb21tdW5pY2F0ZScsXG4gIHBsdWdpbjogJ2tvbW11bmljYXRlLWNvcmRvdmEtcGx1Z2luJyxcbiAgcGx1Z2luUmVmOiAna29tbXVuaWNhdGUnLFxuICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0tvbW11bmljYXRlLWlvL0tvbW11bmljYXRlLUNvcmRvdmEtSW9uaWMtUGhvbmVHYXAtQ2hhdC1QbHVnaW4nLFxuICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUyddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBLb21tdW5pY2F0ZSBleHRlbmRzIEF3ZXNvbWVDb3Jkb3ZhTmF0aXZlUGx1Z2luIHtcbiAgLyoqXG4gICAqIExvZ2luIHRoZSB1c2VyIHdpdGggdGhlIGRldGFpbHMgcGFzc2VkIGluXG4gICAqIENyZWF0ZXMgYSBuZXcgdXNlciB3aXRoIHRoZSBkZXRhaWxzIHByb3ZpZGVkIHRoZXJlIGlzIG5vIGV4aXN0aW5nIHVzZXJcbiAgICpcbiAgICogdmFyIGttVXNlciA9IHtcbiAgICogICAgJ3VzZXJJZCcgOiAndXNlcklkJywgICAvL1JlcGxhY2UgaXQgd2l0aCB0aGUgdXNlcklkIG9mIHRoZSBsb2dnZWQgaW4gdXNlclxuICAgKiAgICAncGFzc3dvcmQnIDogJ3Bhc3N3b3JkJywgIC8vcmVwbGFjZSB3aXRoIHBhc3N3b3JkXG4gICAqICAgICdhdXRoZW50aWNhdGlvblR5cGVJZCcgOiAxLFxuICAgKiAgICAnaW1hZ2VMaW5rJyA6IDxpbWFnZS1saW5rLWZvci11c2VyPlxuICAgKiAgICAnYXBwbGljYXRpb25JZCcgOiAnPEFQUF9JRD4nLCAgLy9yZXBsYWNlIHRoaXMgd2l0aCB5b3VyIEFQUF9JRCBmcm9tIEFwcGxvemljIERhc2hib2FyZFxuICAgKiAgICAnZGV2aWNlQXBuc1R5cGUnIDogMCAgICAvL1NldCAwIGZvciBEZXZlbG9wbWVudCBhbmQgMSBmb3IgRGlzdHJpYnV0aW9uIChSZWxlYXNlKVxuICAgKiB9O1xuICAgKlxuICAgKiBAcGFyYW0ga21Vc2VyIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbG9naW4oa21Vc2VyOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBmb3IgcHVzaCBub3RpZmljYXRpb25cbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJQdXNoTm90aWZpY2F0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFueSB1c2VyIGlzIGxvZ2dlZCBpbiBvciBub3RcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaXNMb2dnZWRJbigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHRva2VuIGZvciBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHRva2VuIHtzdHJpbmd9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdXBkYXRlUHVzaE5vdGlmaWNhdGlvblRva2VuKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2ggdGhlIGNvbnZlcnNhdGlvbiBzY3JlZW4gKGl0IGNvbnRhaW5zIGFsbCB0aGUgZXhpc3RpbmcgY29udmVyc2F0aW9ucylcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgbGF1bmNoQ29udmVyc2F0aW9uKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdW5jaCB0aGUgY29udmVyc2F0aW9uIGlkZW50aWZpZWQgYnkgdGhlIGdpdmVuIGNoYW5uZWwoY29udmVyc2F0aW9uKSBrZXlcbiAgICpcbiAgICogbGV0IGNvbnZPYmogPSB7XG4gICAqICAgJ2NsaWVudENoYW5uZWxLZXknIDogY2xpZW50Q2hhbm5lbEtleSwgLy9wYXNzIHRoZSBjbGllbnRDaGFubmVsS2V5IGhlcmVcbiAgICogICAndGFrZU9yZGVyJyA6IHRydWUgLy9za2lwIGNoYXQgbGlzdCBvbiBiYWNrIHByZXNzLCBwYXNzIGZhbHNlIGlmIHlvdSB3YW50IHRvIHNob3cgY2hhdCBsaXN0IG9uIGJhY2sgcHJlc3NcbiAgICogfTtcbiAgICpcbiAgICogQHBhcmFtIGNvbnZlcnNhdGlvbk9iamVjdCB7YW55fSB0aGUgY2hhbm5lbCBrZXkgYW5kIG90aGVyIGluZm9ybWF0aW9uXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxhdW5jaFBhcnRpY3VsYXJDb252ZXJzYXRpb24oY29udmVyc2F0aW9uT2JqZWN0OiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhIG5ldyBjb252ZXJzYXRpb24sIGRldGFpbHMgYWJvdXQgdGhlIGNvbnZlcnNhdGlvbiB0byBiZSBwYXNzZWQgYXMgcGFyYW1ldGVyc1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZFxuICAgKiBAcGFyYW0gY29udmVyc2F0aW9uUGFyYW1zXG4gICAqIEBwYXJhbSBjb252ZXJhdGlvblBhcmFtcyB7YW55fSB0aGUgdXNlciBkZXRhaWxzXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHN0YXJ0TmV3Q29udmVyc2F0aW9uKGNvbnZlcnNhdGlvblBhcmFtczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUHJvY2VzcyBwdXNoIG5vdGlmaWNhdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIGRhdGEge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlL2ZhbHNlXG4gICAqL1xuICBAQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgcHJvY2Vzc1B1c2hOb3RpZmljYXRpb24oZGF0YTogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ291dCB0aGUgY3VycmVudCB1c2VyXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGxvZ291dCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdGFydCBhIHNpbmdsZSBjaGF0IChjb252ZXJzYXRpb24pXG4gICAqXG4gICAqIEBkZXByZWNhdGVkXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IHRoZSB1c2VyIGRldGFpbHNcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc3RhcnRTaW5nbGVDaGF0KGRhdGE6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdW5jaGVzIGEgY29udmVyc2F0aW9uIHdpdGggdGhlIHByb3BlcnRpZXMgcGFzc2VkIGluIHRoZSBjb252ZXJzYXRpb24gcGFyYW1cbiAgICpcbiAgICogdmFyIGNvbnZlcnNhdGlvbk9iamVjdCA9IHtcbiAgICogICAnaXNVbmlxdWUnIDogZmFsc2UsXG4gICAqICAgJ2FnZW50SWRzJzpbJzxBR0VOVF9JRD4nXSwgIC8vTGlzdCBvZiBhZ2VudElkcy4gQUdFTlRfSUQgaXMgdGhlIGVtYWlsSUQgdXNlZCB0byBzaWdudXAgb24gS29tbXVuaWNhdGVcbiAgICogICAnYm90SWRzJzogWyc8Qk9UX0lEPiddICAvL0xpc3Qgb2YgYm90SWRzLiBHbyB0byBNYW5hZ2UgQm90cyhodHRwczovL2Rhc2hib2FyZC5rb21tdW5pY2F0ZS5pby9ib3RzL21hbmFnZS1ib3RzKSAtPiBDb3B5IGJvdElEXG4gICAqIH07XG4gICAqXG4gICAqIEBwYXJhbSBjb252ZXJzYXRpb25PYmplY3Qge2FueX0gdGhlIHVzZXIgZGV0YWlsc1xuICAgKiBAcGFyYW0gY29udmVyYXRpb25PYmplY3RcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2VcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgY29udmVyc2F0aW9uQnVpbGRlcihjb252ZXJhdGlvbk9iamVjdDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cbiJdfQ==